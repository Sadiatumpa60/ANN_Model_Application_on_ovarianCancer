# -*- coding: utf-8 -*-
"""DL_Predict Ovarian Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G9qF8M0FzbhaFWwmrHsSl9p4eAxjC-df
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# import important library
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import seaborn as sns
from scipy import stats
import os
from collections import Counter

# %matplotlib inline
import pickle
import warnings
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.base import clone
from sklearn.preprocessing import label_binarize
from scipy import interp
from sklearn.metrics import roc_curve, auc 

from matplotlib.legend_handler import HandlerLine2D
import time

import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import cross_val_score

from xgboost import XGBClassifier

from sklearn.metrics import accuracy_score
#from sklearn.externals import joblib

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df_original = pd.read_csv('/content/drive/MyDrive/NiazSir_Research/Predict Ovarian Cancer_withlevel (2).csv')
df_original.head()

df_original.dtypes

df_original=df_original[pd.to_numeric(df_original['TYPE'], errors='coerce').notnull()]
df_original['TYPE']=df_original['TYPE'].astype('float')

df_original=df_original[pd.to_numeric(df_original['Menopause'], errors='coerce').notnull()]
df_original['Menopause']=df_original['Menopause'].astype('float')

df_original=df_original[pd.to_numeric(df_original['Age'], errors='coerce').notnull()]
df_original['Age']=df_original['Age'].astype('float')

df_original=df_original[pd.to_numeric(df_original['TYPE'], errors='coerce').notnull()]
df_original['PLT']=df_original['PLT'].astype('float')

df_original.dtypes



from sklearn.feature_selection import mutual_info_classif

feature_df =df_original [['MPV','BASO#' ,'PHOS', 'GLU.', 'K','AST', 'BASO%','Mg','Menopause','CL','CEA','EO#','CA19-9','ALB','IBIL','GGT','MCH','GLO','ALT','DBIL','Age','RDW',
                          'PDW','CREA','AFP','HGB','Na','HE4','LYM#','CA125','BUN','LYM%','Ca','AG','MONO#','PLT','NEU','EO%','TP','UA','RBC','PCT','CO2CP','TBIL',
                          'HCT','MONO%','MCV','ALP']]
pk_class_labels =df_original['TYPE']

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import callbacks,layers

stp_train_X, stp_test_X, stp_train_y, stp_test_y = train_test_split(feature_df, 
             pk_class_labels, test_size=0.3, random_state=42)

stp_train_X= np.array(stp_train_X)
stp_test_X=np.array(stp_test_X)
stp_train_y=np.array(stp_train_y)
stp_test_y=np.array( stp_test_y)

stp_train_X[0].shape

"""  16 lyars of NN"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import callbacks,layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input,Dense,Dropout

model = Sequential()
model.add(Input(shape=(48,)))
model.add(Dense(16,activation='relu'))  #using 16 nurons 
model.add(Dropout(0.2)) 
model.add(Dense(8,activation='relu')) #using 8 nurons 
model.add(Dropout(0.2)) 
#model.add(Dense(8,activation='relu')) #using 8 nurons 
#model.add(Dropout(0.2))
#model.add(Dense(4,activation='relu')) #using 8 nurons 
#model.add(Dropout(0.2))
model.add(Dense(1,activation='sigmoid'))

model.compile( optimizer ='sgd' , loss ='binary_crossentropy' ,metrics=['accuracy'])

model.fit(stp_train_X,stp_train_y,epochs=20,validation_data =(stp_test_X,stp_test_y))